
#importing data manipulation
library(dplyr)
library(ggplot2)
library(tidyverse)
library(ISLR2)
library(broom)  
#importing dataset
Auto =ISLR2::Auto

#Q6

adjusted_auto <- Auto %>%
  mutate(car_origin = case_when(
    origin == 1 ~ "American",
    origin == 2 ~ "European",
    origin == 3 ~ "Japanese",
    TRUE ~ "Other"  
  ))



ggplot(data = adjusted_auto) + 
  geom_boxplot(
    aes(x = car_origin, y = weight),
    alpha = 0.5,
    fill = "steelblue"
  ) +
  geom_jitter(
    aes(x = car_origin, y = weight),  # Match x-axis with boxplot
    alpha = 0.5,
    color = "steelblue",
    width = 0.2  # Adjust jitter width for clarity 
  ) +
  annotate("text", 
           x = 3, y = 3000,  # Adjust position for better visibility
           label = "The heaviest Japanese made car is \n less heavy than the \n median American car.", 
           color = "black", size = 4) +  # Smaller size for less intrusiveness
  labs(x = "Car Origin", y = "Weight in Pounds(lbs)") # Clearer labels



# Fit the interaction model 
lm(acceleration ~ weight * car_origin, data = adjusted_auto) -> prediction

# Visualize with separate lines for each origin
ggplot(data = broom::augment(prediction)) +
  geom_point(aes(x = weight, y = acceleration, color = car_origin), alpha = 0.5) + 
  geom_line(aes(x = weight, y = .fitted, color = car_origin), size = 1) +  # Size for clarity
  labs(x = "Weight in pounds", y = "Acceleration", color = "Origin") +   # Legend label 
  theme(legend.position = "bottom") # Adjust legend position as needed



#Q8

#opening the dataframe
ames_df = openintro::ames
ames_df

#filtering all the numerical values from the dataframe
ames_df_selection <-  ames_df %>%
  select_if(is.numeric) 



#creating the input datacolumn name 
col_names =colnames(ames_df_selection)[colnames(ames_df_selection) != "price"]

#creating a input for the model
input_=paste("price ~",  paste(
  col_names,
  collapse = "+"
))

# Fit the interaction model 
lm(input_, data = ames_df_selection) -> prediction

ggplot(data = broom::augment(prediction)) +
  geom_point(aes(x = price, y = .fitted), alpha = 0.6) +  
  geom_smooth(aes(x = price, y = .fitted), method = "lm", se = FALSE) + 
  labs(x = "Actual Price", y = "Prediction") + 
  theme(legend.position = "bottom") 

#making coorelation 
augment(prediction) %>% 
  select(price, .fitted) %>% 
  cor()


coef_summary <- summary(prediction)$coefficients
max_se <- max(coef_summary[, "Std. Error"]) 
print(coef_summary)
print(max_se)




library(nnet)### get this if you don't
library(e1071) ## get this if you don't


library(ISLR2) 
library(dplyr)
library(broom)
library(caret)
library(pscl)

# Load Caravan dataset
data(Caravan)

# Encoding 
caravan_df <- Caravan %>%
  mutate(Purchase = ifelse(Purchase == "Yes", 1, 0)) 

# Select features (adjust column names and consider feature selection)
col_names <- names(caravan_df)[!names(caravan_df) %in% c("Purchase")] 
input_formula <- as.formula(paste("Purchase ~", paste(col_names, collapse = " + ")))

# Logistic Regression
glm_model <- glm(input_formula, data = caravan_df, family = "binomial")


data_selected <- select(caravan_df, -Purchase)
data_selected

# Get predictions for the confusion matrix 
predictions <- predict(glm_model, newdata = data_selected, type = "response")
predicted_labels <- ifelse(predictions > 0.5, 1, 0) 



#truth table of the model with the confusion matrix
# Assuming you have 'predicted_labels' and 'true_labels'
cm <- confusionMatrix(factor(predicted_labels), factor(caravan_df$Purchase))
cm


#accuracy of the model
accuracy <- cm$overall["Accuracy"]
print(accuracy)


print("Yes the predictors are coorealted as the there is 94% accuracy")

#rsquare value of the model 
pR2(glm_model) 
